{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRole" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "CreateBackupVolume": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "BackupVolumeDevice" }, "" ] }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseCfnAppInstaller": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "ConfluenceAppPrepUrl" }, "" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] } ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    }
  },
  "Description": "This template deploys a STIG-hardened Enterprise Linux 7 instance to host the Confluence service.",
  "Mappings": {
    "Distro2RootDevice": {
      "AmazonLinux": {
        "DeviceName": "xvda"
      },
      "CentOS": {
        "DeviceName": "sda1"
      },
      "RedHat": {
        "DeviceName": "sda1"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {}
  },
  "Outputs": {
    "ConfluenceInstanceId": {
      "Description": "Instance ID",
      "Value": { "Ref": "ConfluenceHost" }
    }
  },
  "Parameters": {
  },
  "Resources": {
    "ConfluenceHost": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Authentication": {
          "Ec2IamRole": {
            "roleName": { "Ref": "InstanceRole" },
            "type": "S3"
          }
        },
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "files": {
              "/tmp/adminkeys.pub": {
                "source": { "Ref": "AdminPubkeyURL" },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/tmp/admkey.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /tmp/adminkeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-admkey-install": {
                "command": "bash -xe /tmp/admkey.sh"
              }
            }
          },
          "app-install": {
            "commands": {
              "10-app-install": {
                "command": "bash -xe /etc/cfn/scripts/confluenceprep.sh"
              }
            },
            "files": {
              "/etc/cfn/scripts/confluenceprep.sh": {
                "group": "root",
                "mode": "000700",
                "owner": "root",
                "source": { "Ref": "ConfluenceAppPrepUrl" }
              },
              "/etc/systemd/system/confluence.service": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[Unit]\n",
                      "Description=Confluence Service\n",
                      "After=network.target iptables.service firewalld.service firewalld.service httpd.service\n",
                      "\n",
                      "[Service]\n",
                      "Type=forking\n",
                      "User=confluence\n",
                      "ExecStartPre=/bin/sleep 15\n",
                      "ExecStart=/opt/atlassian/confluence/bin/start-confluence.sh\n",
                      "ExecStop=/opt/atlassian/confluence/bin/stop-confluence.sh\n",
                      "ExecReload=/opt/atlassian/confluence/bin/confluence.sh | sleep 60 | /opt/atlassian/confluence/bin/confluence.sh\n",
                      "\n",
                      "[Install]\n",
                      "WantedBy=multi-user.target\n"
                    ]
                  ]
                }
              }
            }
          },
          "configSets": {
            "launch": [
              "setup",
              "admkey-install",
              "osprep-launch",
              "watchmaker-install",
              "watchmaker-launch",
              {
                "Fn::If": [
                  "UseCfnAppInstaller",
                  "app-install",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ]
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource ConfluenceHost",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          },
          "install-updates": {
            "commands": {
              "10-install-updates": {
                "command": "yum -y update"
              }
            }
          },
          "osprep-launch": {
            "files": {
              "/etc/cfn/scripts/osprep.sh": {
                "group": "root",
                "mode": "000700",
                "owner": "root",
                "source": { "Ref": "ConfluenceOsPrepUrl" }
              }
            },
            "commands": {
              "1-osprep-launch": {
                "command": "bash -xe /etc/cfn/scripts/osprep.sh"
              }
            }
          },
          "reboot": {
            "commands": {
              "10-reboot": {
                "command": "shutdown -r +1 &"
              }
            }
          },
          "setup": {
            "files": {
              "/etc/cfn/Confluence.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ConfluenceHost.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource ConfluenceHost",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PipIndexFips" },
                      "\n",
                      "pip install --index-url=\"$PYPI_URL\" wheel==0.29.0\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade pip setuptools boto3 watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/tmp/adminkeys.pub": {
                "group": "root",
                "mode": "000600",
                "owner": "root",
                "source": { "Ref": "AdminPubkeyURL" }
              },
              "/tmp/admkey.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /tmp/adminkeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          },
          "watchmaker-update": {
            "commands": {
              "10-watchmaker-update": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --salt-states None",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateBackupVolume",
              {
                "DeviceName": { "Ref": "BackupVolumeDevice" },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "BackupVolumeSize" },
                  "VolumeType": { "Ref": "BackupVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRole" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyPairName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": { "Ref": "SecurityGroupIds" },
            "SubnetId": { "Ref": "SubnetId" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "\n",
                "hostname: ",
                { "Ref": "Hostname" },
                "\n",
                "fqdn: ",
                { "Ref": "Hostname" },
                ".",
                { "Ref": "Domainname" },
                "\n",
                "\n",
                {
                  "Fn::If": [
                    "CreateBackupVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "  - cloud-init-per instance mkfs-bkupvolume mkfs -t ext4 ",
                          { "Ref": "BackupVolumeDevice" },
                          "\n",
                          "\n",
                          "mounts:\n",
                          "  - [ ",
                          "\"",
                          { "Ref": "BackupVolumeDevice" },
                          "\", ",
                          "\"",
                          { "Ref": "BackupVolumeMountPath" },
                          "\", ",
                          "\"auto\" ",
                          "]\n"
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "\n",
                "runcmd:\n",
                "  - |\n",
                "    # Export cert bundle ENVs\n",
                "    export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "    export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n\n",
                "    \n",
                "    # Define our error-handler\n",
                "    function err_exit {\n",
                "     echo \"${1}\"\n",
                "     logger -p kern.crit -t UserData \"${1}\"\n",
                "     /opt/aws/bin/cfn-signal -e 1 --stack ",
                { "Ref": "AWS::StackName" },
                " --resource ConfluenceHost\n",
                "     exit 1\n",
                "    }\n",
                "    # Install RPMs needed by the cfn-tools.\n",
                "    yum --enablerepo=",
                { "Ref": "EpelRepo" },
                " install -y ",
                { "Ref": "PyStache" },
                " ",
                { "Ref": "PipRpm" },
                " || err_exit 'Could not install Cfn dependencies.'\n",
                "    \n",
                "    # Upgrade pip and setuptools\n",
                "    PYPI_URL=",
                { "Ref": "PipIndexFips" },
                "\n",
                "    pip install --index-url=\"$PYPI_URL\"",
                " --upgrade pip setuptools\n\n",
                "    # Update cfn-bootstrapper hash method\n",
                "    printf 'Updating CFn hash-check method... '\n",
                "    PYVERS=$(python -c 'import sys;",
                " version=sys.version_info[:2];",
                " print(\"{0}.{1}\".format(*version))')\n",
                "    sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/'",
                " /usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                "/util.py && echo 'Success' || ",
                "err_exit 'Failed updating CFn hash-method'\n",
                "    \n",
                "    # Initialize the CFn subsystems\n",
                "    /opt/aws/bin/cfn-init -v -c launch",
                " --stack ",
                { "Ref": "AWS::StackName" },
                " --resource ConfluenceHost",
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                " --region ",
                { "Ref": "AWS::Region" },
                " ||",
                " ( echo 'ERROR: cfn-init failed! Aborting!';",
                " /opt/aws/bin/cfn-signal -e 1",
                "  --stack ",
                { "Ref": "AWS::StackName" },
                "  --resource ConfluenceHost",
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "  --region ",
                { "Ref": "AWS::Region" },
                ";",
                " exit 1",
                " )\n\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
