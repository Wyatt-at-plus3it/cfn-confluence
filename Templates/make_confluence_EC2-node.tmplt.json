{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "InstanceRole" },
            ""
          ]
        }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "NoPublicIp" },
            "true"
          ]
        }
      ]
    },
    "AssignStaticPrivateIp": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "PrivateIp" },
            ""
          ]
        }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "AppVolumeDevice" },
            ""
          ]
        }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "NoUpdates" },
            "true"
          ]
        }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "NoReboot" },
            "true"
          ]
        }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "CfnEndpointUrl" },
            ""
          ]
        }
      ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "WatchmakerEnvironment" },
            ""
          ]
        }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "WatchmakerConfig" },
            ""
          ]
        }
      ]
    }
  },
  "Description": "This template deploys a Linux instance to host Atlassian's Confluence application.",
  "Mappings": {
    "Distro2RootDevice": {
      "AmazonLinux": {
        "DeviceName": "xvda"
      },
      "CentOS": {
        "DeviceName": "sda1"
      },
      "RedHat": {
        "DeviceName": "sda1"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "AmiDistro",
            "InstanceType",
            "InstanceRole",
            "KeyPairName",
            "NoPublicIp",
            "NoReboot",
            "NoUpdates",
            "Hostname",
            "Domainname",
            "SecurityGroupIds"
          ]
        },
        {
          "Label": {
            "default": "Confluence EBS Volume (Optional)"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "Confluence Params"
          },
          "Parameters": [
            "ConfluenceOsPrepUrl",
            "ConfluenceInstallBinUrl",
            "ConfluenceInstallerScriptUrl",
            "ConfluenceSharePath",
            "ConfluenceShareType"
          ]
        },
        {
          "Label": {
            "default": "Database Connection Params"
          },
          "Parameters": [
            "DbFqdn",
            "DbAdminName",
            "DbAdminPass",
            "DbInstanceName"
          ]
        }
      ]
    }
  },
  "Outputs": {
    "ConfluenceInstanceId": {
      "Description": "Instance ID",
      "Value": { "Ref": "ConfluenceEC2" }
    }
  },
  "Parameters": {
    "AmiDistro": {
      "AllowedValues": [
        "CentOS",
        "RedHat"
      ],
      "Default": "CentOS",
      "Description": "Linux distro of the AMI",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "",
        "/dev/xvdf",
        "/dev/xvdg",
        "/dev/xvdh",
        "/dev/xvdi",
        "/dev/xvdj"
      ],
      "Default": "",
      "Description": "(Optional) Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/opt/data",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "1",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "1",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "https://cloudformation.us-east-1.amazonaws.com",
      "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "ConfluenceInstallBinUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to Confluence installer-bin.",
      "Type": "String"
    },
    "ConfluenceInstallerScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that installs Confluence to the EC2 instance.",
      "Type": "String"
    },
    "ConfluenceOsPrepUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that prepares the EC2 instance for a Confluence install.",
      "Type": "String"
    },
    "ConfluenceSharePath": {
      "Default": "",
      "Description": "Share-path of shared Confluence content.",
      "Type": "String"
    },
    "ConfluenceShareType": {
      "AllowedValues": [
        "glusterfs",
        "nfs"
      ],
      "Description": "Type of network share hosting shared Confluence content.",
      "Type": "String"
    },
    "DbAdminName": {
      "Description": "Name of the Confluence master database-user.",
      "Type": "String"
    },
    "DbAdminPass": {
      "Description": "Password of the Confluence master database-user.",
      "Type": "String"
    },
    "DbFqdn": {
      "Description": "Fully-qualified domainname of the Confluence database host.",
      "Type": "String"
    },
    "DbInstanceName": {
      "Description": "Instance-name of the Confluence database.",
      "Type": "String"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Confluence's hostname and DNS record",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Description": "Node-name for Confluence's hostname and DNS record",
      "Type": "String"
    },
    "InstanceRole": {
      "Default": "",
      "Description": "(Optional) IAM instance role to apply to the instance",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "c4.large",
        "c4.xlarge",
        "m4.large",
        "m4.xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "PrivateIp": {
      "Default": "",
      "Description": "(Optional) Set a static, primary private IP. Leave blank to auto-select a free IP",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "confbuilder",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PypiIndexUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetId": {
      "Description": "ID of the subnet to assign to the instance",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "",
      "Description": "(Optional) URL to a Watchmaker config file",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    }
  },
  "Resources": {
    "ConfluenceEC2": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "config",
              "watchmaker-install"
            ]
          },
          "config": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                { "Ref": "InstanceRole" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ConfluenceEC2.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource ConfluenceEC2",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRole" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PypiIndexUrl" },
                      "\n",
                      "PYPI_HOST=$(echo $PYPI_URL |sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\")\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --trusted-host=\"$PYPI_HOST\"",
                      " --allow-all-external",
                      " --upgrade pip setuptools watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Fn::Join": [
                "",
                [
                  "/dev/",
                  {
                    "Fn::FindInMap": [
                      "Distro2RootDevice",
                      { "Ref": "AmiDistro" },
                      "DeviceName"
                    ]
                  }
                ]
              ]
            },
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": { "Ref": "AppVolumeDevice" },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRole" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyPairName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": { "Ref": "SecurityGroupIds" },
            "PrivateIpAddress": {
              "Fn::If": [
                "AssignStaticPrivateIp",
                { "Ref": "PrivateIp" },
                { "Ref": "AWS::NoValue" }
              ]
            },
            "SubnetId": { "Ref": "SubnetId" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "\n",
                "hostname: ",
                { "Ref": "Hostname" },
                "\n",
                "fqdn: ",
                { "Ref": "Hostname" },
                ".",
                { "Ref": "Domainname" },
                "\n",
                "manage_etc_hosts: true\n",
                "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "- cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                          { "Ref": "AppVolumeDevice" },
                          "\n",
                          "mounts:\n",
                          "- [ ",
                          { "Ref": "AppVolumeDevice" },
                          ", ",
                          { "Ref": "AppVolumeMountPath" },
                          " ]\n"
                        ]
                      ]
                    },
                    { "Ref": "AWS::NoValue" }
                  ]
                },
                "\n",
                "runcmd:\n",
                "  - |\n",
                "      # Exports used by helper scripts\n",
                "      export CONFLUENCE_SHARE_SERVER=\"",
                       { "Ref": "ConfluenceSharePath" },
                       "\"\n",
                "      export CONFLUENCE_SHARE_TYPE=\"",
                       { "Ref": "ConfluenceShareType" },
                       "\"\n",
                "      export CONFLUENCE_OSPREP_URI=\"",
                       { "Ref": "ConfluenceOsPrepUrl" },
                       "\"\n",
                "      export CONFLUENCE_INSTALLBIN_URL=\"",
                       { "Ref": "ConfluenceInstallBinUrl" },
                       "\"\n",
                "      export CONFLUENCE_INSTALLSCRIPT_URL=\"",
                       { "Ref": "ConfluenceInstallerScriptUrl" },
                       "\"\n",
                "      export CONFLUENCE_DB_HOST_FQDN=\"",
                       { "Ref": "DbFqdn" },
                       "\"\n",
                "      export CONFLUENCE_DB_INSTANCE_NAME=\"",
                       { "Ref": "DbInstanceName" },
                       "\"\n",
                "      export CONFLUENCE_DB_ADMIN_PASS=\"",
                       { "Ref": "DbAdminPass" },
                       "\"\n",
                "      export CONFLUENCE_DB_ADMIN_USER=\"",
                       { "Ref": "DbAdminName" },
                       "\"\n",
                "      \n",
                "      # Export cert bundle ENVs\n",
                "      export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n\n",
                "      \n",
                "      # Define our error-handler\n",
                "      function err_exit {\n",
                "         echo \"${1}\"\n",
                "         logger -p kern.crit -t UserData \"${1}\"\n",
                "         /opt/aws/bin/cfn-signal -e 1 --stack ",
                            { "Ref": "AWS::StackName" },
                          " --resource ConfluenceEC2\n",
                "         exit 1\n",
                "      }\n",
                "      \n",
                "      # Install RPMs needed by the cfn-tools.\n",
                "      yum --enablerepo=",
                       { "Ref": "EpelRepo" },
                       " install -y ",
                       { "Ref": "PyStache" },
                       " ",
                       { "Ref": "PipRpm" },
                       " || err_exit 'Could not install Cfn dependencies.'\n",
                "      \n",
                "      # Initialize the Cfn subsystems\n",
                "      /opt/aws/bin/cfn-init -s ",
                       { "Ref": "AWS::StackName" },
                       " -r ConfluenceEC2 ",
                       " --region ",
                       { "Ref": "AWS::Region" },
                       " && echo 'Successfully ran cfn-init'",
                       " || err_exit 'Failed to run cfn-init' > /dev/stderr\n",
                "      \n",
                "      # Capture CFn envs in case need to use later...\n",
                "      echo 'Stow script ENVs for later use...'\n",
                "      install -b -m 0400 /dev/null /etc/cfn/Confluence.envs\n",
                "      env | grep CONFLUENCE > /etc/cfn/Confluence.envs\n",
                "      \n",
                "      # Fetch and run the OS-prep script\n",
                "      printf 'Fetching OS-prep script... '\n",
                "      curl -skL \"${CONFLUENCE_OSPREP_URI}\" -o",
                       " /root/confluence_osprep.sh && echo 'Success.' || ",
                       "  err_exit 'Failed fetching OS-prep script'\n",
                "      if [[ $(head -1 /root/confluence_osprep.sh | ",
                       " grep -q bash)$? -eq 0 ]]\n",
                "      then\n",
                "         echo 'Starting OS preparation'\n",
                "         bash /root/confluence_osprep.sh ||",
                          " err_exit 'OS-prep operation failed'\n",
                "      else\n",
                "         err_exit 'Fetched URL content was not a script'\n",
                "      fi\n",
                "      if [[ -z ${CONFLUENCE_INSTALLSCRIPT_URL+xxx} ]]\n",
                "      then\n",
                "         /opt/aws/bin/cfn-signal -e 0",
                          " --stack ",
                          { "Ref" : "AWS::StackName" },
                          " --resource ConfluenceEC2",
                          " --region ",
                          { "Ref" : "AWS::Region"},
                          "\n",
                "      else\n",
                "         curl -skL \"${CONFLUENCE_INSTALLSCRIPT_URL}\" -o",
                       " /root/confluence_appinstall.sh ||",
                       " err_exit 'Failed to fetch app-installer'\n",
                "         /opt/aws/bin/cfn-signal -e 0",
                          " --stack ",
                          { "Ref" : "AWS::StackName" },
                          " --resource ConfluenceEC2",
                          " --region ",
                          { "Ref" : "AWS::Region"},
                          "\n",
                "      fi\n",
                "      \n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
